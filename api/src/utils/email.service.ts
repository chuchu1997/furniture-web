import { Injectable } from '@nestjs/common';
import * as nodemailer from 'nodemailer';
import { MyLogger } from './logger.service';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class EmailService {
  private transporter: nodemailer.Transporter;
  private logger: MyLogger;

  constructor(private configService: ConfigService) {
    // this.transporter = nodemailer.createTransporter({
    //   host: this.configService.get('SMTP_HOST'),
    //   port: parseInt(this.configService.get('SMTP_PORT') ?? ''),
    //   secure: this.configService.get('SMTP_PORT') === '465', // true for 465, false for other ports
    //   auth: {
    //     user: this.configService.get('SMTP_USER'),
    //     pass: this.configService.get('SMTP_PASS'),
    //   },
    // });
  }
  async sendResetLinkToEmail(
    email: string,
    resetToken: string,
    userName: string,
  ): Promise<void> {
    const resetLink = `${this.configService.get('FRONTEND_URL')}/reset-password?token=${resetToken}`;

    const mailOptions = {
      from: {
        name: this.configService.get('APP_NAME') || 'Your App Name',
        address: this.configService.get('SMTP_USER'),
      },
      to: email,
      subject: 'üîê Link ƒë·ªÉ b·∫°n l·∫•y l·∫°i m·∫≠t kh·∫©u ',
      html: this.getResetPasswordTemplate(userName, resetLink),
    };
    await this.transporter.sendMail(mailOptions);
    this.logger.log(
      `ƒê√£ g·ª≠i link reset password cho email ${email} th√†nh c√¥ng !!`,
    );
  }

  async sendPasswordChangedNotification(
    email: string,
    userName: string,
  ): Promise<void> {
    try {
      const mailOptions = {
        from: process.env.SMTP_USER,
        to: email,
        subject: 'üîí L·∫•y l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng ',
        html: this.getTemplateRegisterSuccess(userName),
      };

      await this.transporter.sendMail(mailOptions);
    } catch (error) {
      console.error('Failed to send password changed notification:', error);
    }
  }
  private getTemplateRegisterSuccess(userName: string) {
    return `
    <body style="font-family: Arial, sans-serif; background-color: #f4f4f4; padding: 20px;">
      <div style="max-width: 600px; margin: 0 auto; background-color: #ffffff; padding: 30px; border-radius: 10px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);">
        <div style="text-align: center;">
          <div style="font-size: 40px;">üîí</div>
          <h2 style="color: #2e6da4;">B·∫°n ƒë√£ ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng</h2>
        </div>

        <p>Xin ch√†o <strong>${userName}</strong>,</p>
        <p>M·∫≠t kh·∫©u c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng. N·∫øu b·∫°n th·ª±c hi·ªán thay ƒë·ªïi n√†y, b·∫°n kh√¥ng c·∫ßn l√†m g√¨ th√™m.</p>

        <div style="background-color: #e9f6ff; border-left: 4px solid #007bff; padding: 10px 15px; margin: 20px 0;">
          N·∫øu b·∫°n <strong>kh√¥ng th·ª±c hi·ªán</strong> thay ƒë·ªïi n√†y, vui l√≤ng li√™n h·ªá v·ªõi b·ªô ph·∫≠n h·ªó tr·ª£ <strong>ngay l·∫≠p t·ª©c</strong> ƒë·ªÉ b·∫£o v·ªá t√†i kho·∫£n c·ªßa b·∫°n.
        </div>

        <p style="margin-top: 30px;">Tr√¢n tr·ªçng,<br/>ƒê·ªôi ng≈© h·ªó tr·ª£ c·ªßa ch√∫ng t√¥i</p>

        <hr style="margin: 30px 0;" />

        <div style="text-align: center; font-size: 12px; color: #888;">
          ƒê√¢y l√† email t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi th∆∞ n√†y.<br/>
          &copy; 2025 T√™n ·ª®ng D·ª•ng C·ªßa B·∫°n. M·ªçi quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.
        </div>
      </div>
    </body>
  `;
  }
  private getResetPasswordTemplate(userName: string, resetUrl: string): string {
    return `
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>L·∫•y l·∫°i m·∫≠t kh·∫©u </title>
        <style>
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 600px;
                margin: 0 auto;
                padding: 20px;
                background-color: #f4f4f4;
            }
            .container {
                background: white;
                padding: 40px;
                border-radius: 10px;
                box-shadow: 0 0 20px rgba(0,0,0,0.1);
            }
            .header {
                text-align: center;
                margin-bottom: 30px;
            }
            .header h1 {
                color: #2c3e50;
                margin: 0;
                font-size: 28px;
            }
            .lock-icon {
                font-size: 48px;
                margin-bottom: 20px;
            }
            .content {
                margin-bottom: 30px;
            }
            .button {
                display: inline-block;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 15px 30px;
                text-decoration: none;
                border-radius: 50px;
                font-weight: bold;
                font-size: 16px;
                text-align: center;
                margin: 20px 0;
                transition: transform 0.2s;
            }
            .button:hover {
                transform: translateY(-2px);
            }
            .link-fallback {
                background: #f8f9fa;
                padding: 15px;
                border-radius: 5px;
                word-break: break-all;
                font-family: monospace;
                font-size: 12px;
                color: #666;
                margin: 20px 0;
            }
            .warning {
                background: #fff3cd;
                border-left: 4px solid #ffc107;
                padding: 15px;
                margin: 20px 0;
                border-radius: 0 5px 5px 0;
            }
            .footer {
                text-align: center;
                margin-top: 40px;
                padding-top: 20px;
                border-top: 1px solid #eee;
                color: #666;
                font-size: 12px;
            }
            .security-note {
                background: #d1ecf1;
                border-left: 4px solid #17a2b8;
                padding: 15px;
                margin: 20px 0;
                border-radius: 0 5px 5px 0;
            }
        </style>
    </head>
 <body>
  <div class="container">
    <div class="header">
      <div class="lock-icon">üîê</div>
      <h1>Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u</h1>
    </div>

    <div class="content">
      <p>Xin ch√†o <strong>${userName}</strong>,</p>
      <p>Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u c·ªßa b·∫°n. N·∫øu b·∫°n ƒë√£ th·ª±c hi·ªán y√™u c·∫ßu n√†y, vui l√≤ng nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ t·∫°o m·∫≠t kh·∫©u m·ªõi:</p>

      <div style="text-align: center;">
        <a href="${resetUrl}" class="button">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
      </div>

      <div class="warning">
        <strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong> Li√™n k·∫øt n√†y s·∫Ω h·∫øt h·∫°n sau <strong>10 ph√∫t</strong> ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n cho t√†i kho·∫£n c·ªßa b·∫°n.<br />
        ‚è≥ <em>Li√™n k·∫øt s·∫Ω t·ª± ƒë·ªông h·ªßy sau 10 ph√∫t.</em>
      </div>

      <p>N·∫øu n√∫t kh√¥ng ho·∫°t ƒë·ªông, b·∫°n c√≥ th·ªÉ sao ch√©p v√† d√°n li√™n k·∫øt sau v√†o tr√¨nh duy·ªát:</p>
      <div class="link-fallback">${resetUrl}</div>

      <div class="security-note">
        <strong>üõ°Ô∏è B·∫£o m·∫≠t:</strong> N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y. M·∫≠t kh·∫©u c·ªßa b·∫°n s·∫Ω kh√¥ng b·ªã thay ƒë·ªïi.
      </div>
    </div>

    <div class="footer">
      <p>ƒê√¢y l√† email t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>
      <p>&copy; 2025 T√™n ·ª©ng d·ª•ng c·ªßa b·∫°n. M·ªçi quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
    </div>
  </div>
</body>

    </html>
    `;
  }
}
